<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <util:properties id="tccjdbc" location="classpath:tccjdbc.properties"/>

    <!--当Tcc事务异常后,恢复Job将会定期恢复事务.在Spring配置文件中配置RecoverConfig类型的Bean来设置恢复策略,
    maxRetryCount表示一个事务最多尝试恢复次数,超过将不再自动恢复,需要人工干预,默认是30次;
    recoverDuration表示一个事务日志当超过一定时间间隔后没有更新就会被认为是发生了异常,需要恢复,恢复Job将扫描超过这个时间间隔依旧没有更新的事务日志,并对这些事务进行恢复,时间单位是秒,默认是120秒;
    cronExpression表示恢复Job触发间隔配置,默认是0 */1 * * * ?;
    delayCancelExceptions表示系统发生了设置的异常时,主事务不立即rollback.而是由恢复job来执行事务恢复.通常需要将超时异常设置为delayCancelExceptions,这样可以避免因为服务调用时发生了超时异常,
    主事务如果立刻rollback, 但是从事务还没执行完,从而造成主事务rollback失败.示例中com.alibaba.dubbo.remoting.TimeoutException为底层rpc框架为dubbo,超时异常发生时框架抛出的超时异常类,需要将其加入delayCancelExceptions中.
    -->
    <bean class="org.mengyun.tcctransaction.spring.recover.DefaultRecoverConfig">
        <property name="maxRetryCount" value="30"/>
        <property name="recoverDuration" value="5"/>
        <property name="cronExpression" value="0/5 * * * * ?"/>
    </bean>

    <!--需要为参与事务的应用项目配置一个TransactionRepository,tcc-transaction框架使用transactionRepository持久化事务日志.
    可以选择FileSystemTransactionRepository、SpringJdbcTransactionRepository、RedisTransactionRepository或ZooKeeperTransactionRepository.-->
    <!--使用SpringJdbcTransactionRepository配置,dataSource需要单独配置,不能和业务里使用的dataSource复用-->
    <bean id="transactionRepository"
          class="org.mengyun.tcctransaction.spring.repository.SpringJdbcTransactionRepository">
        <property name="dataSource" ref="tccDataSource"/>
        <property name="domain" value="ORDER"/>
        <property name="tbSuffix" value="_ORD"/>
        <!--<property name="serializer" ref="objectSerializer"/>-->
    </bean>

    <bean id="tccDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
          destroy-method="close" lazy-init="false">
        <property name="driverClass" value="#{tccjdbc['jdbc.driverClassName']}"/>
        <property name="jdbcUrl" value="#{tccjdbc['tcc.jdbc.url']}"/>
        <property name="user" value="#{tccjdbc['jdbc.username']}"/>
        <property name="password" value="#{tccjdbc['jdbc.password']}"/>
        <property name="initialPoolSize" value="#{tccjdbc['c3p0.initialPoolSize']}"/>
        <property name="minPoolSize" value="#{tccjdbc['c3p0.minPoolSize']}"/>
        <property name="maxPoolSize" value="#{tccjdbc['c3p0.maxPoolSize']}"/>
        <property name="acquireIncrement" value="#{tccjdbc['c3p0.acquireIncrement']}"/>
        <property name="maxIdleTime" value="#{tccjdbc['c3p0.maxIdleTime']}"/>
        <property name="checkoutTimeout" value="#{tccjdbc['c3p0.checkoutTimeout']}"/>
    </bean>

    <!--使用FileSystemTransactionRepository配置,FileSystemTransactionRepository仅适用事务发布方或调用方应用节点为单节点场景,因为日志是存储在应用节点本地文件中-->
    <!--
    <bean id="transactionRepository" class="org.mengyun.tcctransaction.repository.FileSystemTransactionRepository">
        <property name="rootPath" value="/data/tcc"/>
    </bean>
    -->

    <!--使用ZooKeeperTransactionRepository配置-->
    <!--
    <bean id="transactionRepository"
          class="org.mengyun.tcctransaction.repository.ZooKeeperTransactionRepository">
        <property name="zkServers" value="localhost:2181,localhost:2183,localhost:2185"/>
        <property name="zkServers" value="localhost:2181"/>
        <property name="zkTimeout" value="10000"/>
        <property name="zkRootPath" value="/tcc_ut"/>
    </bean>
     -->

    <!--使用RedisTransactionRepository配置,需配置redis服务器为AOF模式并在redis.conf中设置appendfsync为always以防止日志丢失-->
    <!--
    <bean id="transactionRepository" class="org.mengyun.tcctransaction.repository.RedisTransactionRepository">
        <property name="keyPrefix" value="TCC:ORD:"/>
        <property name="jedisPool" ref="jedisPool"/>
        <property name="serializer" ref="kryoSerializer"/>
    </bean>

    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="1000"/>
        <property name="maxWaitMillis" value="1000"/>
    </bean>

    <bean id="jedisPool" class="redis.clients.jedis.JedisPool">
        <constructor-arg index="0" ref="jedisPoolConfig"/>
        <constructor-arg index="1" value="127.0.0.1"/>
        <constructor-arg index="2" value="6379" type="int"/>
        <constructor-arg index="3" value="3000" type="int"/>
        <constructor-arg index="4" type="java.lang.String">
            <null/>
        </constructor-arg>
        <constructor-arg index="5" value="0" type="int"/>
    </bean>

    <bean id="kryoSerializer" class="org.mengyun.tcctransaction.serializer.KryoPoolSerializer"/>
    -->
</beans>